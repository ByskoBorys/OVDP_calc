import io
from datetime import date

import pandas as pd
import streamlit as st

from data_loader import load_df
from bond_utils import (
    secondary_price_from_yield,
    primary_price_from_yield_minfin,
    secondary_yield_from_price,
    primary_yield_from_price_minfin,
    build_cashflow_schedule,
    trade_outcome,
)

st.set_page_config(page_title="–û–í–î–ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")
st.title("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–í–î–ü")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
if st.sidebar.button("üîÅ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"):
    st.cache_data.clear()
    st.rerun()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–∏—Ö –ù–ë–£
with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ù–ë–£..."):
    try:
        df, asof_label = load_df()
    except Exception as e:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ù–ë–£: {e}")
        st.stop()

# –°–∞–π–¥–±–∞—Ä: –¥–∞—Ç–∞ —Ç–∞ FAQ
# ---- FAQ / –ü—Ä–æ —Å–µ—Ä–≤—ñ—Å (Markdown) ----
FAQ_MD = r"""
### –©–æ —Ü–µ –∑–∞ —Å–µ—Ä–≤—ñ—Å
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–í–î–ü –¥–æ–ø–æ–º–∞–≥–∞—î —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ **—Ü—ñ–Ω—É ‚Üî –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å** –¥–ª—è –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –æ–±–ª—ñ–≥–∞—Ü—ñ–π –£–∫—Ä–∞—ó–Ω–∏, –ø–æ–±–∞—á–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —ñ –ø–æ–≥–∞—à–µ–Ω–Ω—è, –∞ —Ç–∞–∫–æ–∂ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ **P&L —É–≥–æ–¥–∏ (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤)**.  
–î–∞–Ω—ñ –±–µ—Ä–µ–º–æ –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –ù–ë–£; —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –æ–¥–∏–Ω XLSX-—Ñ–∞–π–ª.

### –Ø–∫ –º–∏ —Ä–∞—Ö—É—î–º–æ (–∫–æ—Ä–æ—Ç–∫–æ)
- –ü—Ä–∞—Ü—é—î–º–æ –∑ **–¥–≤–æ–º–∞ —Ä–∏–Ω–∫–∞–º–∏**:
  - **–í—Ç–æ—Ä–∏–Ω–Ω–∏–π** ‚Äî —Ü—ñ–Ω–∏/–¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞ –±—ñ—Ä–∂—ñ —á–∏ –ø–æ–∑–∞ –Ω–µ—é.
  - **–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω)** ‚Äî –∞—É–∫—Ü—ñ–æ–Ω–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏.
- **–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤** –±—É–¥—É—î–º–æ –≤—ñ–¥ –¥–∞—Ç–∏ –ø–æ–≥–∞—à–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∫—Ä–æ–∫–æ–º **182 –¥–Ω—ñ**.  
  –£ –¥–µ–Ω—å –ø–æ–≥–∞—à–µ–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ **–¥–≤—ñ –æ–∫—Ä–µ–º—ñ –≤–∏–ø–ª–∞—Ç–∏**: –∫—É–ø–æ–Ω —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–º—ñ–Ω–∞–ª—É.
- **–ù–ö–î** —Ä–∞—Ö—É—î–º–æ –º—ñ–∂ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∫—É–ø–æ–Ω–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–∞ —Ü—ñ–π —Å–∞–º—ñ–π 182-–¥–µ–Ω–Ω—ñ–π —Å—ñ—Ç—Ü—ñ.

### –í—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫
- –Ø–∫—â–æ –æ–±–ª—ñ–≥–∞—Ü—ñ—è **–¥–∏—Å–∫–æ–Ω—Ç–Ω–∞** (–±–µ–∑ –∫—É–ø–æ–Ω–∞) –∞–±–æ –∑–∞–ª–∏—à–∏–≤—Å—è –ª–∏—à–µ **–æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–ª–∞—Ç—ñ–∂** ‚Üí –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ **SIM** (*simple interest*):  
  —Ü—ñ–Ω–∞ = —Å—É–º–∞ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É / (1 + *y* ¬∑ *t*), –¥–µ *y* ‚Äî —Ä—ñ—á–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, *t* ‚Äî —á–∞—Å—Ç–∫–∞ —Ä–æ–∫—É.
- –Ø–∫—â–æ –æ–±–ª—ñ–≥–∞—Ü—ñ—è **–∫—É–ø–æ–Ω–Ω–∞** —ñ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ ‚Üí –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ **YTM** (*–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Å—Ç–∞–≤–∫–∞*):  
  –¥–∏—Å–∫–æ–Ω—Ç—É—î–º–æ **–∫–æ–∂–Ω–∏–π** –∫—É–ø–æ–Ω —ñ –Ω–æ–º—ñ–Ω–∞–ª –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é Œ£ CF / (1 + *y*)^*t*.  
  –£ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É **–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—É–ø–æ–Ω —ñ –Ω–æ–º—ñ–Ω–∞–ª –Ω–µ —Å—É–º—É—é—Ç—å—Å—è**, –∞ –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ.

### –ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫ (–ú—ñ–Ω—Ñ—ñ–Ω)
- –î–ª—è **–¥–∏—Å–∫–æ–Ω—Ç–Ω–∏—Ö** –ø–∞–ø–µ—Ä—ñ–≤ ‚Üí **SIM** (—è–∫ –≤–∏—â–µ).
- –î–ª—è **–∫—É–ø–æ–Ω–Ω–∏—Ö** –ø–∞–ø–µ—Ä—ñ–≤ ‚Üí **—Ñ–æ—Ä–º—É–ª–∞ –ú—ñ–Ω—Ñ—ñ–Ω—É –∑ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–º**:  
  –∫–æ–∂–µ–Ω –∫—É–ø–æ–Ω —ñ –Ω–æ–º—ñ–Ω–∞–ª –¥–∏—Å–∫–æ–Ω—Ç—É—é—Ç—å—Å—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–æ–º  
  `DF = (1 + y/k)^(Days / KDP0)`,  
  –¥–µ *k* ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø–æ–Ω—ñ–≤ –Ω–∞ —Ä—ñ–∫, *Days* ‚Äî –¥–Ω—ñ–≤ –≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–æ –≤–∏–ø–ª–∞—Ç–∏,  
  **KDP0** ‚Äî –¥–æ–≤–∂–∏–Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—É–ø–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –≤ –¥–Ω—è—Ö.  
  –û—Ç–∂–µ, —Ü—ñ–Ω–∞ = Œ£ (–∫—É–ø–æ–Ω / DF) + (–Ω–æ–º—ñ–Ω–∞–ª / DF –Ω–∞ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–Ω—è).

### –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L —É–≥–æ–¥–∏ (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤)
1. –ó–∞–¥–∞–π—Ç–µ **–¥–∞—Ç—É –∫—É–ø—ñ–≤–ª—ñ** —Ç–∞ **–¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –∫—É–ø—ñ–≤–ª—ñ** (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫), –∞ —Ç–∞–∫–æ–∂ **–¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂—É** —ñ **–¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É**.
2. –ú–∏ —Ä–∞—Ö—É—î–º–æ **dirty-—Ü—ñ–Ω—É** –Ω–∞ –æ–±–∏–¥–≤—ñ –¥–∞—Ç–∏ –≤—Ç–æ—Ä–∏–Ω–Ω–∏–º –¥–≤–∏–≥—É–Ω–æ–º (SIM –∞–±–æ YTM ‚Äî –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–∞–ø–µ—Ä—É –Ω–∞ –∫–æ–∂–Ω—É —ñ–∑ –¥–∞—Ç).
3. –î–æ–¥–∞—î–º–æ **—É—Å—ñ –∫—É–ø–æ–Ω–∏**, —â–æ –ø—Ä–∏–ø–∞–ª–∏ –º—ñ–∂ –¥–∞—Ç–∞–º–∏ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è (—É –¥–µ–Ω—å –ø–æ–≥–∞—à–µ–Ω–Ω—è ‚Äî –æ–∫—Ä–µ–º–æ –∫—É–ø–æ–Ω —ñ –Ω–æ–º—ñ–Ω–∞–ª).
4. **P&L (—Å—É–º–∞)** = dirty-—Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚àí dirty-—Ü—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ + –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏.  
   **–†—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å** = (P&L / dirty-—Ü—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ) √ó (365 / –¥–Ω—ñ–≤ —É –ø–æ–∑–∏—Ü—ñ—ó) √ó 100%.

### –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å
1. –û–±–µ—Ä—ñ—Ç—å **ISIN** —ñ **–¥–∞—Ç—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É**.  
2. –í–∫–∞–∂—ñ—Ç—å, —â–æ –≤–≤–æ–¥–∏—Ç–µ: **–¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å** —á–∏ **—Ü—ñ–Ω—É (dirty)**, —ñ –æ–±–µ—Ä—ñ—Ç—å **—Ä–∏–Ω–æ–∫** (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π / –ø–µ—Ä–≤–∏–Ω–Ω–∏–π).  
3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å **¬´–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏¬ª** ‚Äî –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ù–ö–î, —á–∏—Å—Ç—É —Ü—ñ–Ω—É —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ –≤–∏–ø–ª–∞—Ç.  
4. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é **¬´–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX¬ª** ‚Äî —É—Å–µ –ª—è–∂–µ –≤ –æ–¥–∏–Ω –∞—Ä–∫—É—à —É —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É, —â–æ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ.  
5. –£ –ø–æ–ª—è—Ö –≤–≤–µ–¥–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ **–∫–æ–º—É –∞–±–æ –∫—Ä–∞–ø–∫—É** —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫.

### –í–∞–∂–ª–∏–≤–æ
- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ –¥–æ–≤—ñ–¥–Ω–∏–∫—É –ù–ë–£; –º–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –±—ñ—Ä–∂–æ–≤–∏—Ö –∫–æ—Ç–∏—Ä—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è *day count*.  
- –¶–µ **–Ω–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∞ –ø–æ—Ä–∞–¥–∞**. –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–ø–µ—Ä—É –ø–µ—Ä–µ–¥ –ø—Ä–∏–π–Ω—è—Ç—Ç—è–º —Ä—ñ—à–µ–Ω—å.
"""

# --- –í–∏–∫–ª–∏–∫ —É —Å–∞–π–¥–±–∞—Ä—ñ ---
with st.sidebar.expander("–ü—Ä–æ —Å–µ—Ä–≤—ñ—Å / FAQ", expanded=False):
    st.markdown(FAQ_MD)


# ---------- —É—Ç–∏–ª—ñ—Ç–∏ ----------

def _parse_decimal(text: str) -> float | None:
    if text is None:
        return None
    s = str(text).strip().replace(" ", "").replace("\u00A0", "")
    s = s.replace(",", ".")
    try:
        return float(s)
    except Exception:
        return None

def _xlsx_one_sheet(sections: list[tuple[str, pd.DataFrame]]) -> bytes:
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as w:
        sheet = "OVDP"
        start = 0
        for title, dfsec in sections:
            tdf = pd.DataFrame([[title]], columns=[" "])
            tdf.to_excel(w, sheet_name=sheet, index=False, header=False, startrow=start)
            start += 1
            if dfsec is not None and not dfsec.empty:
                dfsec.to_excel(w, sheet_name=sheet, index=False, startrow=start)
                start += len(dfsec) + 2
            else:
                pd.DataFrame([["‚Äî"]]).to_excel(w, sheet_name=sheet, index=False, header=False, startrow=start)
                start += 2
    bio.seek(0)
    return bio.getvalue()

# ---------- UI ----------

tab_calc, tab_trade = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "P&L —É–≥–æ–¥–∏"])

# ===== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† =====
with tab_calc:
    st.subheader("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ ‚Üî –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ")

    c1, c2, c3, c4 = st.columns([1.5, 1.1, 1.1, 1.1])
    with c1:
        isin = st.selectbox("ISIN", sorted(df["ISIN"].dropna().unique()))
        calc_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É", value=date.today())
    with c2:
        input_mode = st.radio("–†–µ–∂–∏–º", ["–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí –¶—ñ–Ω–∞", "–¶—ñ–Ω–∞ ‚Üí –î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å"], horizontal=False)
    with c3:
        market = st.radio("–†–∏–Ω–æ–∫", ["–í—Ç–æ—Ä–∏–Ω–Ω–∏–π", "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω)"], horizontal=False)
    with c4:
        if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí –¶—ñ–Ω–∞":
            y_text = st.text_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, %", value="10,00", placeholder="–Ω–∞–ø—Ä. 19,75")
        else:
            p_text = st.text_input("–¶—ñ–Ω–∞ (dirty)", value="1000,00", placeholder="–Ω–∞–ø—Ä. 985,50")

    st.caption("–ü–æ—Ä–∞–¥–∞: –º–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ —è–∫ –∑ –∫–æ–º–æ—é, —Ç–∞–∫ —ñ –∑ –∫—Ä–∞–ø–∫–æ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏¬ª –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è.")

    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary"):
        try:
            if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí –¶—ñ–Ω–∞":
                y_val = _parse_decimal(y_text)
                if y_val is None:
                    st.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å.")
                    st.stop()

                if market == "–í—Ç–æ—Ä–∏–Ω–Ω–∏–π":
                    dirty, ai, clean, ccy, formula = secondary_price_from_yield(str(calc_date), isin, y_val, df)
                else:
                    dirty, ai, clean, ccy, formula = primary_price_from_yield_minfin(str(calc_date), isin, y_val, df)

                sched, coupon_rate, ccy2 = build_cashflow_schedule(df, isin, str(calc_date))
                st.success(f"**–í–∞–ª—é—Ç–∞:** {ccy} ‚Ä¢ **–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞):** {round(coupon_rate*100, 2)}%")
                st.info(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** Dirty: **{dirty} {ccy}** | –ù–ö–î: **{ai}** | Clean: **{clean}** | –§–æ—Ä–º—É–ª–∞: **{formula}**")

                if not sched.empty:
                    st.markdown("**–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —Ç–∞ –ø–æ–≥–∞—à–µ–Ω–Ω—è (–≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É):**")
                    st.dataframe(sched, use_container_width=True)

                inputs_df = pd.DataFrame([{"ISIN": isin, "–î–∞—Ç–∞": str(calc_date), "–†–∏–Ω–æ–∫": market, "–í–≤—ñ–¥": "Y%", "Y, %": y_val}])
                result_df = pd.DataFrame([{"Dirty": dirty, "–ù–ö–î": ai, "Clean": clean, "–í–∞–ª—é—Ç–∞": ccy, "–§–æ—Ä–º—É–ª–∞": formula}])
                xlsx = _xlsx_one_sheet([
                    ("–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ", inputs_df),
                    ("–†–µ–∑—É–ª—å—Ç–∞—Ç", result_df),
                    ("–ì—Ä–∞—Ñ—ñ–∫ (–º–∞–π–±—É—Ç–Ω—ñ –ø–æ—Ç–æ–∫–∏)", sched),
                ])
                st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX", data=xlsx,
                                   file_name=f"OVDP_calc_{isin}_{calc_date}.xlsx",
                                   mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

            else:
                p_val = _parse_decimal(p_text)
                if p_val is None:
                    st.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞.")
                    st.stop()

                if market == "–í—Ç–æ—Ä–∏–Ω–Ω–∏–π":
                    res = secondary_yield_from_price(str(calc_date), isin, p_val, df)
                else:
                    res = primary_yield_from_price_minfin(str(calc_date), isin, p_val, df)

                st.success(f"**–í–∞–ª—é—Ç–∞:** {res['Currency']} ‚Ä¢ **–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å:** {res['Yield_percent']}% ({res['Formula']})")

                sched, coupon_rate, ccy = build_cashflow_schedule(df, isin, str(calc_date))
                st.markdown(f"**–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞):** {round(coupon_rate*100, 2)}% ‚Ä¢ **–í–∞–ª—é—Ç–∞:** {ccy}")
                if not sched.empty:
                    st.dataframe(sched, use_container_width=True)

                inputs_df = pd.DataFrame([{"ISIN": isin, "–î–∞—Ç–∞": str(calc_date), "–†–∏–Ω–æ–∫": market, "–í–≤—ñ–¥": "–¶—ñ–Ω–∞", "–¶—ñ–Ω–∞ (dirty)": p_val}])
                result_df = pd.DataFrame([{"–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, %": res["Yield_percent"], "–§–æ—Ä–º—É–ª–∞": res["Formula"], "–í–∞–ª—é—Ç–∞": res["Currency"]}])
                xlsx = _xlsx_one_sheet([
                    ("–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ", inputs_df),
                    ("–†–µ–∑—É–ª—å—Ç–∞—Ç", result_df),
                    ("–ì—Ä–∞—Ñ—ñ–∫ (–º–∞–π–±—É—Ç–Ω—ñ –ø–æ—Ç–æ–∫–∏)", sched),
                ])
                st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX", data=xlsx,
                                   file_name=f"OVDP_yield_{isin}_{calc_date}.xlsx",
                                   mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")

# ===== P&L –£–ì–û–î–ò =====
with tab_trade:
    st.subheader("P&L —É–≥–æ–¥–∏ (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤)")

    # 1) ISIN ‚Äî –∑ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è–º –±–µ–π–¥–∂–µ–º
    isin_t = st.selectbox("ISIN –¥–ª—è —É–≥–æ–¥–∏", sorted(df["ISIN"].dropna().unique()))
    st.markdown(
        """
        <style>
        .isin-badge {
            display:inline-block; padding:8px 14px; border-radius:999px;
            font-weight:700; background:#1f6feb; color:#fff; margin-top:6px; margin-bottom:10px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    st.markdown(f"<span class='isin-badge'>ISIN: {isin_t}</span>", unsafe_allow_html=True)

    st.divider()

    # 2) –ö—É–ø—ñ–≤–ª—è —Ç–∞ –ü—Ä–æ–¥–∞–∂ ‚Äî –Ω–∞ –æ–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ
    col_buy, col_sell = st.columns(2)
    with col_buy:
        st.markdown("### –ö—É–ø—ñ–≤–ª—è")
        buy_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", value=date.today(), key="buy_date")
        buy_y_txt = st.text_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π)", value="10,00", key="buy_y_txt")

    with col_sell:
        st.markdown("### –ü—Ä–æ–¥–∞–∂")
        sell_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É", value=date.today(), key="sell_date")
        sell_y_txt = st.text_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π)", value="9,50", key="sell_y_txt")

    if st.button("–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ P&L", type="primary"):
        try:
            buy_y = _parse_decimal(buy_y_txt)
            sell_y = _parse_decimal(sell_y_txt)
            if buy_y is None or sell_y is None:
                st.error("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç–µ–π.")
                st.stop()

            res = trade_outcome(isin_t, str(buy_date), buy_y, str(sell_date), sell_y, df)

            st.success(f"**–í–∞–ª—é—Ç–∞:** {res['Currency']} ‚Ä¢ **–¢—Ä–∏–º–∞–ª–∏ –¥–Ω—ñ–≤:** {res['Days_held']}")
            st.write(f"**Dirty (buy):** {res['Buy']['price_dirty']} | **Dirty (sell):** {res['Sell']['price_dirty']}")
            st.write(f"**–û—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏ (–≤–∫–ª—é—á–Ω–æ –∑ –ø–æ–≥–∞—à–µ–Ω–Ω—è–º –Ω–æ–º—ñ–Ω–∞–ª—É, —è–∫—â–æ –±—É–ª–æ):** {res['Coupons_total']} | "
                     f"**P&L, —Å—É–º–∞:** {res['Profit_abs']} | **–†—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞ %:** {res['Profit_ann_pct']}%")

            if res.get("Coupons_received"):
                st.markdown("**–ö—É–ø–æ–Ω–∏/–ø–æ–≥–∞—à–µ–Ω–Ω—è –∑–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è:**")
                st.dataframe(pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞", "–°—É–º–∞"]), use_container_width=True)
            else:
                st.info("–ó–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫—É–ø–æ–Ω—ñ–≤ –Ω–µ –±—É–ª–æ.")

            trade_df = pd.DataFrame([{
                "ISIN": isin_t, "–î–∞—Ç–∞ –∫—É–ø—ñ–≤–ª—ñ": str(buy_date), "Y –∫—É–ø—ñ–≤–ª—ñ, %": buy_y,
                "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É": str(sell_date), "Y –ø—Ä–æ–¥–∞–∂—É, %": sell_y, "–í–∞–ª—é—Ç–∞": res["Currency"],
                "–î–Ω—ñ–≤ —É –ø–æ–∑–∏—Ü—ñ—ó": res["Days_held"], "Dirty (buy)": res["Buy"]["price_dirty"],
                "Dirty (sell)": res["Sell"]["price_dirty"], "–ö—É–ø–æ–Ω–∏, –≤—Å—å–æ–≥–æ": res["Coupons_total"],
                "P&L, —Å—É–º–∞": res["Profit_abs"], "P&L, —Ä—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞, %": res["Profit_ann_pct"],
            }])

            xlsx = _xlsx_one_sheet([
                ("Trade", trade_df),
                ("Coupons in holding period", pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞","–°—É–º–∞"]) if res.get("Coupons_received") else pd.DataFrame()),
            ])
            st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX (—É–≥–æ–¥–∞)", data=xlsx,
                               file_name=f"OVDP_trade_{isin_t}_{buy_date}_{sell_date}.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É P&L: {e}")
