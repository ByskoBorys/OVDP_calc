import io
import streamlit as st
import pandas as pd
from datetime import date
import sys, platform, os

import streamlit as st
st.set_page_config(page_title="–û–í–î–ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")

st.write("‚úÖ Boot checkpoint A: Streamlit imported")
st.caption(f"Python {sys.version.split()[0]} on {platform.platform()}")
st.caption(f"Working dir: {os.getcwd()}")

try:
    import pandas as pd
    from data_loader import load_df
    from bond_utils import (
        secondary_price_from_yield,
        primary_price_from_yield_minfin,
        yields_from_price,
        build_cashflow_schedule,
        trade_outcome
    )
    st.write("‚úÖ Boot checkpoint B: modules imported")
except Exception as e:
    st.error(f"‚ùå Import error: {e}")
    st.stop()


import streamlit as st
import pandas as pd
from datetime import date

from data_loader import load_df
from bond_utils import (
    secondary_price_from_yield,
    primary_price_from_yield_minfin,
    yields_from_price,
    build_cashflow_schedule,
    trade_outcome
)

st.set_page_config(page_title="–û–í–î–ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")

def _to_xlsx_bytes(sheets: dict) -> bytes:
    """
    sheets: {"SheetName": pd.DataFrame –∞–±–æ dict/—Å–ø–∏—Å–æ–∫ –ø–∞—Ä}
    –ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–π—Ç–∏ XLSX –¥–ª—è st.download_button.
    """
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as writer:
        for name, data in sheets.items():
            if isinstance(data, pd.DataFrame):
                data.to_excel(writer, sheet_name=name[:31], index=False)
            elif isinstance(data, dict):
                pd.DataFrame(list(data.items()), columns=["–ü–æ–ª–µ","–ó–Ω–∞—á–µ–Ω–Ω—è"]).to_excel(writer, sheet_name=name[:31], index=False)
            else:
                pd.DataFrame([data]).to_excel(writer, sheet_name=name[:31], index=False)
    bio.seek(0)
    return bio.getvalue()


st.title("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–í–î–ü")

# ------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö -------
with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ù–ë–£..."):
    try:
        df, asof = load_df()
    except Exception as e:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ù–ë–£: {e}")
        st.stop()

st.sidebar.success(f"–î–∞–Ω—ñ –ù–ë–£ —Å—Ç–∞–Ω–æ–º –Ω–∞: {asof}")
st.sidebar.caption("–î–∂–µ—Ä–µ–ª–æ: bank.gov.ua/files/Fair_value/sec_hdbk.xls")

with st.sidebar.expander("FAQ / –©–æ –≤–º—ñ—î –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä?"):
    st.markdown(
        """
**–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä** –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å **—Ü—ñ–Ω—É ‚Üî –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å** –¥–ª—è –û–í–î–ü.

- **–í—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫ (—Ü—ñ–Ω–∞):**  
  ‚Ä¢ –î–ª—è **–¥–∏—Å–∫–æ–Ω—Ç–Ω–∏—Ö** —Ç–∞ **–∫—É–ø–æ–Ω–Ω–∏—Ö –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º –∫—É–ø–æ–Ω–æ–º** —Ü—ñ–Ω–∞ —Ä–∞—Ö—É—î—Ç—å—Å—è –∑–∞ **—Ñ–æ—Ä–º—É–ª–æ—é –°–Ü–ú**.  
  ‚Ä¢ –î–ª—è **—É—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∫—É–ø–æ–Ω–Ω–∏—Ö** ‚Äî —á–µ—Ä–µ–∑ **YTM** (–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å).

- **–ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫ (—Ü—ñ–Ω–∞ –ú—ñ–Ω—Ñ—ñ–Ω—É):**  
  ‚Ä¢ **–î–∏—Å–∫–æ–Ω—Ç–Ω—ñ** ‚Äî –∑–∞ **—Ñ–æ—Ä–º—É–ª–æ—é –°–Ü–ú**.  
  ‚Ä¢ **–ö—É–ø–æ–Ω–Ω—ñ** ‚Äî –∑–∞ **—Ñ–æ—Ä–º—É–ª–æ—é –ú—ñ–Ω—Ñ—ñ–Ω—É** (—Å–µ—Ä–µ–¥–Ω—å–æ–∑–≤–∞–∂–µ–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è).

- **–£–≥–æ–¥–∞ –ö—É–ø–∏–≤ ‚Üí –ü—Ä–æ–¥–∞–≤:**  
  –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º **dirty-—Ü—ñ–Ω** –Ω–∞ –¥–∞—Ç–∏ –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É, **–æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫—É–ø–æ–Ω—ñ–≤**, –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è —Ç–∞ **—Ä—ñ—á–Ω–æ—ó –ø—Ä–æ—Å—Ç–æ—ó –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ**.
        """
    )


# ------- –¢–∞–±—ã -------
tab_calc, tab_trade = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —É–≥–æ–¥—É"])

# ======================== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ========================
with tab_calc:
    st.subheader("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ ‚Üî –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ")
    c1, c2, c3, c4 = st.columns([1.5, 1.2, 1.2, 1.2])

    with c1:
        isin = st.selectbox("ISIN", sorted(df["ISIN"].dropna().unique()))
        calc_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É", value=date.today())

    with c2:
        market = st.radio("–†–∏–Ω–æ–∫", ["–í—Ç–æ—Ä–∏–Ω–Ω–∏–π", "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω)"], horizontal=True)
        input_mode = st.radio("–í–≤—ñ–¥", ["–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)", "–¶—ñ–Ω–∞ (dirty)"], horizontal=True)

    with c3:
        if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
            y_val = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, %", value=10.00, step=0.01, format="%.2f")
        else:
            p_val = st.number_input("–¶—ñ–Ω–∞ (dirty)", value=1000.00, step=0.01, format="%.2f")

    st.divider()

    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary"):
        try:
            if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
                if market == "–í—Ç–æ—Ä–∏–Ω–Ω–∏–π":
                    dirty, ai, clean, ccy, formula = secondary_price_from_yield(str(calc_date), isin, y_val, df)
                else:
                    dirty, ai, clean, ccy, formula = primary_price_from_yield_minfin(str(calc_date), isin, y_val, df)

                sched, coupon_rate, _ccy = build_cashflow_schedule(df, isin, from_date=str(calc_date))

                st.success(
                    f"**–í–∞–ª—é—Ç–∞:** {ccy} ‚Ä¢ **–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞):** {round(coupon_rate*100,2)}%"
                )
                st.info(
                    f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** Dirty: **{dirty} {ccy}** | –ù–ö–î: **{ai}** | Clean: **{clean}** | –§–æ—Ä–º—É–ª–∞: **{formula}**"
                )
                st.markdown("**–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —Ç–∞ –ø–æ–≥–∞—à–µ–Ω–Ω—è (–≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É):**")
                st.dataframe(sched, use_container_width=True)

            else:
                res = yields_from_price(str(calc_date), isin, p_val, df)
                st.success(
                    f"**–í–∞–ª—é—Ç–∞:** {res['Currency']} ‚Ä¢ "
                    f"**–í—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫:** {res['Secondary_yield']}% ({res['Secondary_formula']}) ‚Ä¢ "
                    f"**–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω):** {res['Primary_yield']}% ({res['Primary_formula']})"
                )

                sched, coupon_rate, ccy = build_cashflow_schedule(df, isin, from_date=str(calc_date))
                st.markdown(
                    f"**–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞):** {round(coupon_rate*100,2)}% ‚Ä¢ **–í–∞–ª—é—Ç–∞:** {ccy}"
                )
                st.dataframe(sched, use_container_width=True)

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")

# ======================== –£–ì–û–î–ê (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤) ========================
with tab_trade:
    st.subheader("P&L —É–≥–æ–¥–∏ (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤)")
    c1, c2 = st.columns(2)

    with c1:
        isin_t = st.selectbox("ISIN –¥–ª—è —É–≥–æ–¥–∏", sorted(df["ISIN"].dropna().unique()))
        buy_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", value=date.today())
        buy_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫)", value=10.00, step=0.01, format="%.2f")

    with c2:
        sell_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É", value=date.today())
        sell_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫)", value=9.50, step=0.01, format="%.2f")

    if st.button("–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ P&L", type="primary"):
        try:
            res = trade_outcome(isin_t, str(buy_date), buy_y, str(sell_date), sell_y, df)

            st.success(f"**–í–∞–ª—é—Ç–∞:** {res['Currency']} ‚Ä¢ **–¢—Ä–∏–º–∞–ª–∏ –¥–Ω—ñ–≤:** {res['Days_held']}")
            st.write(
                f"**–¶—ñ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (dirty):** {res['Buy']['price_dirty']} | "
                f"**–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (dirty):** {res['Sell']['price_dirty']}"
            )
            st.write(
                f"**–û—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏:** {res['Coupons_total']} | "
                f"**P&L, —Å—É–º–∞:** {res['Profit_abs']} | **–†—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞ %:** {res['Profit_ann_pct']}%"
            )

            if res.get("Coupons_received"):
                st.markdown("**–ö—É–ø–æ–Ω–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è:**")
                st.dataframe(pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞", "–°—É–º–∞"]), use_container_width=True)
            else:
                st.info("–ó–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫—É–ø–æ–Ω—ñ–≤ –Ω–µ –±—É–ª–æ.")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É P&L: {e}")
