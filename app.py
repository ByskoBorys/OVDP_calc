import streamlit as st
import pandas as pd
from data_loader import load_df
from bond_utils import (
    secondary_price_from_yield, primary_price_from_yield_minfin,
    yields_from_price, build_cashflow_schedule, trade_outcome
)

st.set_page_config(page_title="–û–í–î–ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")
st.title("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–í–î–ü")

df, asof = load_df()
st.sidebar.success(f"–î–∞–Ω—ñ –ù–ë–£ —Å—Ç–∞–Ω–æ–º –Ω–∞: {asof}")
st.sidebar.caption("–î–∂–µ—Ä–µ–ª–æ: bank.gov.ua/files/Fair_value/sec_hdbk.xls")

tab_calc, tab_trade = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —É–≥–æ–¥—É"])

# ================== TAB 1: –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ==================
with tab_calc:
    st.subheader("–Ñ–¥–∏–Ω–µ –≤—ñ–∫–Ω–æ: –∞–±–æ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí —Ü—ñ–Ω–∞, –∞–±–æ —Ü—ñ–Ω–∞ (dirty) ‚Üí –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å")

    col1, col2, col3 = st.columns([2,2,2])

    with col1:
        isin = st.selectbox("–û–±–µ—Ä—ñ—Ç—å ISIN", sorted(df["ISIN"].unique()))
        calc_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")

    with col2:
        market = st.radio("–†–∏–Ω–æ–∫ –¥–ª—è —Ü—ñ–Ω–∏ –∑ –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ", ["–í—Ç–æ—Ä–∏–Ω–Ω–∏–π", "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω)"], horizontal=True)
        input_mode = st.radio("–©–æ –≤–≤–æ–¥–∏—Ç–µ?", ["–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)", "–¶—ñ–Ω–∞ (dirty)"], horizontal=True)

    with col3:
        if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
            y_val = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, %", value=10.0, step=0.01, format="%.2f")
        else:
            p_val = st.number_input("–¶—ñ–Ω–∞ (dirty)", value=1000.00, step=0.01, format="%.2f")

    st.divider()

    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary"):
        try:
            if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
                if market == "–í—Ç–æ—Ä–∏–Ω–Ω–∏–π":
                    dirty, ai, clean, ccy, formula = secondary_price_from_yield(str(calc_date), isin, y_val, df)
                else:
                    dirty, ai, clean, ccy, formula = primary_price_from_yield_minfin(str(calc_date), isin, y_val, df)

                sched, coupon_rate, _ccy = build_cashflow_schedule(df, isin, from_date=str(calc_date))

                st.success(f"**–í–∞–ª—é—Ça:** {ccy}  ‚Ä¢  **–ù–æ–º—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ (–∫—É–ø–æ–Ω):** {round(coupon_rate*100,2)}%")
                st.info(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** Dirty: **{dirty} {ccy}**  |  –ù–ö–î: **{ai}**  |  Clean: **{clean}**  |  –§–æ—Ä–º—É–ª–∞: **{formula}**")

                st.markdown("**–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —ñ –ø–æ–≥–∞—à–µ–Ω–Ω—è (–≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É):**")
                st.dataframe(sched, use_container_width=True)

            else:  # –¶—ñ–Ω–∞ ‚Üí –î–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
                res = yields_from_price(str(calc_date), isin, p_val, df)
                st.success(
                    f"**–í–∞–ª—é—Ça:** {res['Currency']}  ‚Ä¢  "
                    f"**–í—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫:** {res['Secondary_yield']}% ({res['Secondary_formula']})  ‚Ä¢  "
                    f"**–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω):** {res['Primary_yield']}% ({res['Primary_formula']})"
                )
                # –î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞–º–æ –≥—Ä–∞—Ñ—ñ–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤
                sched, coupon_rate, ccy = build_cashflow_schedule(df, isin, from_date=str(calc_date))
                st.markdown(f"**–ù–æ–º—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ (–∫—É–ø–æ–Ω):** {round(coupon_rate*100,2)}%  ‚Ä¢  **–í–∞–ª—é—Ç–∞:** {ccy}")
                st.markdown("**–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —ñ –ø–æ–≥–∞—à–µ–Ω–Ω—è (–≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É):**")
                st.dataframe(sched, use_container_width=True)

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")

# ================== TAB 2: P&L –£–ì–û–î–ò ==================
with tab_trade:
    st.subheader("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —É–≥–æ–¥—É: –ö—É–ø–∏–≤ ‚Üí –ü—Ä–æ–¥–∞–≤ (P&L)")

    c1, c2 = st.columns(2)

    with c1:
        isin_t = st.selectbox("ISIN –¥–ª—è —É–≥–æ–¥–∏", sorted(df["ISIN"].unique()))
        buy_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏")
        buy_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫)", value=10.00, step=0.01, format="%.2f")

    with c2:
        sell_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É")
        sell_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫)", value=9.50, step=0.01, format="%.2f")

    if st.button("–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ P&L", type="primary"):
        try:
            res = trade_outcome(isin_t, str(buy_date), buy_y, str(sell_date), sell_y, df)

            st.success(f"**–í–∞–ª—é—Ç–∞:** {res['Currency']}  ‚Ä¢  **–¢—Ä–∏–º–∞–ª–∏ –¥–Ω—ñ–≤:** {res['Days_held']}")
            st.write(f"**–¶—ñ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (dirty):** {res['Buy']['price_dirty']}  |  **–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (dirty):** {res['Sell']['price_dirty']}")
            st.write(f"**–û—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏:** {res['Coupons_total']}  |  **–ü—Ä–∏–±—É—Ç–æ–∫ (–∞–±—Å.):** {res['Profit_abs']}  |  **–†—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞ %:** {res['Profit_ann_pct']}%")

            if res["Coupons_received"]:
                st.markdown("**–ö—É–ø–æ–Ω–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è:**")
                st.dataframe(pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞", "–°—É–º–∞"]), use_container_width=True)
            else:
                st.info("–ó–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫—É–ø–æ–Ω—ñ–≤ –Ω–µ –±—É–ª–æ.")

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É P&L: {e}")
