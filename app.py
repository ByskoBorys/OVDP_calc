import io
from datetime import date

import pandas as pd
import streamlit as st

from data_loader import load_df
from bond_utils import (
    secondary_price_from_yield,
    primary_price_from_yield_minfin,
    yields_from_price,
    build_cashflow_schedule,
    trade_outcome,
)

st.set_page_config(page_title="–û–í–î–ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")
st.title("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –û–í–î–ü")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
if st.sidebar.button("üîÅ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"):
    st.cache_data.clear()
    st.rerun()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ù–ë–£..."):
    try:
        df, asof_label = load_df()
    except Exception as e:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ù–ë–£: {e}")
        st.stop()

# –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –¥–∞—Ç–∞ –∏ FAQ
st.sidebar.success(f"–î–∞–Ω—ñ –ù–ë–£ —Å—Ç–∞–Ω–æ–º –Ω–∞: {asof_label}")
st.sidebar.caption("–î–∂–µ—Ä–µ–ª–æ: bank.gov.ua/files/Fair_value/sec_hdbk.xls")
with st.sidebar.expander("FAQ"):
    st.write(
        "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å **—Ü—ñ–Ω—É ‚Üî –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å**. "
        "–í—Ç–æ—Ä–∏–Ω–∫–∞: –¥–∏—Å–∫–æ–Ω—Ç–Ω—ñ —ñ ¬´–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—É–ø–æ–Ω¬ª ‚Üí SIM; —ñ–Ω–∞–∫—à–µ YTM. "
        "–ü–µ—Ä–≤–∏–Ω–∫–∞: –¥–∏—Å–∫–æ–Ω—Ç–Ω—ñ ‚Üí SIM, –∫—É–ø–æ–Ω–Ω—ñ ‚Üí —Ñ–æ—Ä–º—É–ª–∞ –ú—ñ–Ω—Ñ—ñ–Ω—É (simple discount). "
        "P&L: dirty-—Ü—ñ–Ω–∏ –Ω–∞ –¥–∞—Ç–∏ –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É + –æ—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏.\n\n"
        "–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —Ä–∞—Ö—É—î—Ç—å—Å—è **—Å—Ç—Ä–æ–≥–æ** –≤—ñ–¥ –¥–∞—Ç–∏ –ø–æ–≥–∞—à–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∫—Ä–æ–∫–æ–º **182 –¥–Ω—ñ**."
    )

tab_calc, tab_trade = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —É–≥–æ–¥—É"])

def _xlsx_bytes(sheets: dict) -> bytes:
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as w:
        for name, data in sheets.items():
            name = name[:31] or "Sheet1"
            if isinstance(data, pd.DataFrame):
                data.to_excel(w, sheet_name=name, index=False)
            elif isinstance(data, dict):
                pd.DataFrame(list(data.items()), columns=["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–Ω—è"]).to_excel(w, sheet_name=name, index=False)
            else:
                pd.DataFrame([data]).to_excel(w, sheet_name=name, index=False)
    bio.seek(0)
    return bio.getvalue()

# ========== –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ==========
with tab_calc:
    st.subheader("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ ‚Üî –¥–æ—Ö—ñ–¥–Ω–æ—Å—Ç—ñ")

    c1, c2, c3, _ = st.columns([1.5, 1.2, 1.2, 0.8])
    with c1:
        isin = st.selectbox("ISIN", sorted(df["ISIN"].dropna().unique()))
        calc_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É", value=date.today())
    with c2:
        market = st.radio("–†–∏–Ω–æ–∫", ["–í—Ç–æ—Ä–∏–Ω–Ω–∏–π", "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω)"], horizontal=True)
        input_mode = st.radio("–í–≤—ñ–¥", ["–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)", "–¶—ñ–Ω–∞ (dirty)"], horizontal=True)
    with c3:
        if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
            y_val = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å, %", value=10.00, step=0.01, format="%.2f")
        else:
            p_val = st.number_input("–¶—ñ–Ω–∞ (dirty)", value=1000.00, step=0.01, format="%.2f")

    st.divider()

    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", type="primary"):
        try:
            if input_mode == "–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å (%)":
                if market == "–í—Ç–æ—Ä–∏–Ω–Ω–∏–π":
                    dirty, ai, clean, ccy, formula = secondary_price_from_yield(str(calc_date), isin, y_val, df)
                else:
                    dirty, ai, clean, ccy, formula = primary_price_from_yield_minfin(str(calc_date), isin, y_val, df)

                sched, coupon_rate, ccy2 = build_cashflow_schedule(df, isin, str(calc_date))
                st.success(f"**–í–∞–ª—é—Ç–∞:** {ccy} ‚Ä¢ **–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞):** {round(coupon_rate*100, 2)}%")
                st.info(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** Dirty: **{dirty} {ccy}** | –ù–ö–î: **{ai}** | Clean: **{clean}** | –§–æ—Ä–º—É–ª–∞: **{formula}**")
                if not sched.empty:
                    st.markdown("**–ì—Ä–∞—Ñ—ñ–∫ –∫—É–ø–æ–Ω—ñ–≤ —Ç–∞ –ø–æ–≥–∞—à–µ–Ω–Ω—è (–≤—ñ–¥ –¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É):**")
                    st.dataframe(sched, use_container_width=True)

                xlsx = _xlsx_bytes({
                    "Inputs": pd.DataFrame([{"ISIN": isin, "–î–∞—Ç–∞": str(calc_date), "–†–∏–Ω–æ–∫": market, "–í–≤—ñ–¥": "Y%", "Y, %": y_val}]),
                    "Result": pd.DataFrame([{"Dirty": dirty, "–ù–ö–î": ai, "Clean": clean, "–í–∞–ª—é—Ç–∞": ccy, "–§–æ—Ä–º—É–ª–∞": formula}]),
                    "Schedule": sched if not sched.empty else pd.DataFrame([{"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤"}]),
                })
                st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX", data=xlsx,
                                   file_name=f"OVDP_calc_{isin}_{calc_date}.xlsx",
                                   mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

            else:
                res = yields_from_price(str(calc_date), isin, p_val, df)
                st.success(
                    f"**–í–∞–ª—é—Ç–∞:** {res.get('Currency')} ‚Ä¢ "
                    f"**–í—Ç–æ—Ä–∏–Ω–Ω–∏–π:** {res.get('Secondary_yield')}% ({res.get('Secondary_formula')}) ‚Ä¢ "
                    f"**–ü–µ—Ä–≤–∏–Ω–Ω–∏–π (–ú—ñ–Ω—Ñ—ñ–Ω):** {res.get('Primary_yield')}% ({res.get('Primary_formula')})"
                )
                sched, coupon_rate, ccy = build_cashflow_schedule(df, isin, str(calc_date))
                st.markdown(f"**–ö—É–ø–æ–Ω (–Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∞):** {round(coupon_rate*100, 2)}% ‚Ä¢ **–í–∞–ª—é—Ç–∞:** {ccy}")
                if not sched.empty:
                    st.dataframe(sched, use_container_width=True)

                xlsx = _xlsx_bytes({
                    "Inputs": pd.DataFrame([{"ISIN": isin, "–í–≤—ñ–¥": "–¶—ñ–Ω–∞ (dirty)", "–¶—ñ–Ω–∞": p_val, "–î–∞—Ç–∞": str(calc_date)}]),
                    "Result": pd.DataFrame([{
                        "ISIN": isin, "–í–∞–ª—é—Ç–∞": res.get("Currency"),
                        "–í—Ç–æ—Ä., %": res.get("Secondary_yield"), "–§–æ—Ä–º—É–ª–∞ (–≤—Ç–æ—Ä.)": res.get("Secondary_formula"),
                        "–ü–µ—Ä–≤. (–ú—ñ–Ω—Ñ—ñ–Ω), %": res.get("Primary_yield"), "–§–æ—Ä–º—É–ª–∞ (–ø–µ—Ä–≤.)": res.get("Primary_formula"),
                    }]),
                    "Schedule": sched if not sched.empty else pd.DataFrame([{"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤"}]),
                })
                st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX", data=xlsx,
                                   file_name=f"OVDP_calc_{isin}_{calc_date}.xlsx",
                                   mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")

# ========== P&L —É–≥–æ–¥–∏ ==========
with tab_trade:
    st.subheader("P&L —É–≥–æ–¥–∏ (–∫—É–ø–∏–≤ ‚Üí –ø—Ä–æ–¥–∞–≤)")

    c1, c2 = st.columns(2)
    with c1:
        isin_t = st.selectbox("ISIN –¥–ª—è —É–≥–æ–¥–∏", sorted(df["ISIN"].dropna().unique()))
        buy_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", value=date.today())
        buy_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π)", value=10.00, step=0.01, format="%.2f")
    with c2:
        sell_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É", value=date.today())
        sell_y = st.number_input("–î–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É, % (–≤—Ç–æ—Ä–∏–Ω–Ω–∏–π)", value=9.50, step=0.01, format="%.2f")

    if st.button("–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ P&L", type="primary"):
        try:
            res = trade_outcome(isin_t, str(buy_date), buy_y, str(sell_date), sell_y, df)

            st.success(f"**–í–∞–ª—é—Ç–∞:** {res['Currency']} ‚Ä¢ **–¢—Ä–∏–º–∞–ª–∏ –¥–Ω—ñ–≤:** {res['Days_held']}")
            st.write(f"**Dirty (buy):** {res['Buy']['price_dirty']} | **Dirty (sell):** {res['Sell']['price_dirty']}")
            st.write(f"**–û—Ç—Ä–∏–º–∞–Ω—ñ –∫—É–ø–æ–Ω–∏:** {res['Coupons_total']} | **P&L, —Å—É–º–∞:** {res['Profit_abs']} | **–†—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞ %:** {res['Profit_ann_pct']}%")

            if res.get("Coupons_received"):
                st.markdown("**–ö—É–ø–æ–Ω–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è:**")
                st.dataframe(pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞", "–°—É–º–∞"]), use_container_width=True)
            else:
                st.info("–ó–∞ –ø–µ—Ä—ñ–æ–¥ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫—É–ø–æ–Ω—ñ–≤ –Ω–µ –±—É–ª–æ.")

            trade_sheet = pd.DataFrame([{
                "ISIN": isin_t, "–î–∞—Ç–∞ –∫—É–ø—ñ–≤–ª—ñ": str(buy_date), "Y –∫—É–ø—ñ–≤–ª—ñ, %": buy_y,
                "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É": str(sell_date), "Y –ø—Ä–æ–¥–∞–∂—É, %": sell_y, "–í–∞–ª—é—Ç–∞": res["Currency"],
                "–î–Ω—ñ–≤ —É –ø–æ–∑–∏—Ü—ñ—ó": res["Days_held"], "Dirty (buy)": res["Buy"]["price_dirty"],
                "Dirty (sell)": res["Sell"]["price_dirty"], "–ö—É–ø–æ–Ω–∏, –≤—Å—å–æ–≥–æ": res["Coupons_total"],
                "P&L, —Å—É–º–∞": res["Profit_abs"], "P&L, —Ä—ñ—á–Ω–∞ –ø—Ä–æ—Å—Ç–∞, %": res["Profit_ann_pct"],
            }])
            xlsx = _xlsx_bytes({"Trade": trade_sheet})
            if res.get("Coupons_received"):
                xlsx = _xlsx_bytes({"Trade": trade_sheet, "Coupons": pd.DataFrame(res["Coupons_received"], columns=["–î–∞—Ç–∞","–°—É–º–∞"])})
            st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XLSX (—É–≥–æ–¥–∞)", data=xlsx,
                               file_name=f"OVDP_trade_{isin_t}_{buy_date}_{sell_date}.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É P&L: {e}")
